
/**
 * @file modify.cpp
 * @brief A simple client that modifies the
 *        message published by the topic /chatter
 *
 * @author Vaibhav Bhilare
 * @copyright 2017, Vaibhav Bhilare
 *
 * MIT License
 * Copyright (c) 2017 Vaibhav Bhilare
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* --Includes-- */
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "beginner_tutorials/String_Modify.h"
/**
 * @brief      program entrypoint
 *
 * @param      argc  The argc
 * @param      argv  The argv
 *
 * @return     integer 0 upon exit success
 *            integer -1 upon exit failure
 */
int main(int argc, char **argv) {
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line.
   * For programmatic remappings you can use a different version of init() which takes
   * remappings directly, but for most command-line programs, passing argc and argv is
   * the easiest way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "modify");
  /**
  * NodeHandle is the main access point to communications with the ROS system.
  * The first NodeHandle constructed will fully initialize this node, and the last
  * NodeHandle destructed will close down the node.
  */
  ros::NodeHandle n;
  /**
   * This creates a client for the service.
   * The ros::ServiceClient object is used to call the service later on.
   */
  ros::ServiceClient client =
    n.serviceClient<beginner_tutorials::String_Modify>("String_Modify");
  /**
   * Here we instantiate an autogenerated service class, and assign values into its request member.
   * A service class contains two members, request and response.
   * It also contains two class definitions, Request and Response.
   */
  beginner_tutorials::String_Modify srv;
  // Load parameter
  if (n.hasParam("Custom_Message")) {
    ROS_INFO("Parameter msg available");
    if (!n.getParam("Custom_Message", srv.request.Message)) {
      ROS_ERROR("Error Getting Message \n");
      return -1;
    }
  }
  //  This actually calls the service
  if (client.call(srv)) {
    ROS_DEBUG("Successfully Modified the Message");
  } else {
    ROS_ERROR("Failed to call the Service String_Modify");
    return -1;
  }
  return 0;
}
